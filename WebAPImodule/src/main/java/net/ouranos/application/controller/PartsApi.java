/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package net.ouranos.application.controller;

import net.ouranos.domain.model.Parts;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;
import java.util.UUID;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-10T18:31:43.516109700+09:00[Asia/Tokyo]", comments = "Generator version: 7.6.0")
@Validated
@Tag(name = "データ流通システム", description = "the データ流通システム API")
public interface PartsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /parts
     * XXXデータモデルのデータを削除します。
     *
     * @param id データID (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "partsDelete",
        description = "XXXデータモデルのデータを削除します。",
        tags = { "データ流通システム" }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/parts"
    )
    
    ResponseEntity<Void> partsDelete(
      @Parameter(name = "X-Tracking", description = "トラッキングID", in = ParameterIn.HEADER) @RequestHeader(value = "X-Tracking", required = false) UUID xTracking
    , @Parameter(name = "id", description = "データID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "id", required = false) String id
    ); 


    /**
     * GET /parts
     * XXXデータモデルのデータを取得します。
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "partsGet",
        description = "XXXデータモデルのデータを取得します。",
        tags = { "データ流通システム" }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/parts",
        produces = { "application/json" }
    )
    
    ResponseEntity<Object> partsGet(
      @Parameter(name = "X-Tracking", description = "トラッキングID", in = ParameterIn.HEADER) @RequestHeader(value = "X-Tracking", required = false) UUID xTracking
    ); 


    /**
     * POST /parts
     * XXXデータモデルのデータを新規作成or更新します。
     *
     * @param parts Request Body (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     */
    @Operation(
        operationId = "partsPost",
        description = "XXXデータモデルのデータを新規作成or更新します。",
        tags = { "データ流通システム" }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/parts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Object> partsPost(
      @Parameter(name = "X-Tracking", description = "トラッキングID", in = ParameterIn.HEADER) @RequestHeader(value = "X-Tracking", required = false) UUID xTracking
    , @Parameter(name = "Parts", description = "Request Body", required = true) @Valid @RequestBody Parts parts
    ); 


    /**
     * PUT /parts
     * XXXデータモデルのデータを新規作成or更新します。
     *
     * @param parts Request Body (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     */
    @Operation(
        operationId = "partsPut",
        description = "XXXデータモデルのデータを新規作成or更新します。",
        tags = { "データ流通システム" }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/parts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Object> partsPut(
      @Parameter(name = "X-Tracking", description = "トラッキングID", in = ParameterIn.HEADER) @RequestHeader(value = "X-Tracking", required = false) UUID xTracking
    , @Parameter(name = "Parts", description = "Request Body", required = true) @Valid @RequestBody Parts parts
    ); 

}
