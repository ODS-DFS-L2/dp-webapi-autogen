package {{package}};

{{#imports}}import {{import}};
{{/imports}}

{{#_api_controller_impl_}}
{{#swagger2AnnotationLibrary}}
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
{{/swagger2AnnotationLibrary}}
{{#swagger1AnnotationLibrary}}
import io.swagger.annotations.*;
{{/swagger1AnnotationLibrary}}
{{/_api_controller_impl_}}

import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
{{#useResponseEntity}}
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
{{/useResponseEntity}}
{{^useResponseEntity}}
import org.springframework.web.bind.annotation.RestController;
{{/useResponseEntity}}
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
{{^isDelegate}}
import org.springframework.web.context.request.NativeWebRequest;
{{/isDelegate}}

{{#useBeanValidation}}
import {{javaxPackage}}.validation.constraints.*;
import {{javaxPackage}}.validation.Valid;
{{/useBeanValidation}}

import org.springframework.validation.annotation.Validated;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.beans.factory.annotation.Qualifier;

import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.Objects;
import {{javaxPackage}}.annotation.Generated;

import lombok.extern.slf4j.Slf4j;
import jakarta.servlet.http.HttpServletRequest;
import net.ouranos.adaptor.Adaptor;
import net.ouranos.transform.Transform;
import net.ouranos.common.component.TokenIntrospection;
import net.ouranos.common.component.TrackingHeaderBean;
import net.ouranos.common.context.ApiContext;

{{>generatedAnnotation}}
@Validated
@Tag(name = "{{{tagName}}}", description = {{#tagDescription}}"{{{.}}}"{{/tagDescription}}{{^tagDescription}}"the {{{tagName}}} API"{{/tagDescription}})
@Slf4j
@RestController
{{#useRequestMappingOnController}}
{{=<% %>=}}
@RequestMapping("/")
<%={{ }}=%>
{{/useRequestMappingOnController}}
{{#operations}}
public class {{classname}}Controller implements {{classname}} {
{{^isDelegate}}
    {{^reactive}}

    @Value("${api.{{baseName}}.url}")
    private String apiUrl;

    private final Optional<Transform> transform;
    private final Adaptor<Object> adaptor;
    private final TokenIntrospection tokenIntrospection;
    private final TrackingHeaderBean trackingHeaderBean;

    public {{classname}}Controller(@Qualifier("{{baseName}}Transform") Optional<Transform> transform, Adaptor<Object> adaptor, TokenIntrospection tokenIntrospection, TrackingHeaderBean trackingHeaderBean) {
        this.transform = transform;
        this.adaptor = adaptor;
        this.tokenIntrospection = tokenIntrospection;
        this.trackingHeaderBean = trackingHeaderBean;
    }

    @Override
    {{#operation}}
    {{#jdk8-default-interface}}public {{/jdk8-default-interface}}{{>responseType}} {{operationId}}(
      UUID xTracking
    {{#allParams}}
    {{^first}},{{/first}} {{{dataType}}} {{paramName}}
    {{/allParams}}
    ) {
        //extract token from request header
        HttpServletRequest request = ((ServletRequestAttributes) Objects
            .requireNonNull(RequestContextHolder.getRequestAttributes())).getRequest();
        String token = request.getHeader("Authorization");

        //extract queryParam
        String query = request.getQueryString();

        //verify token
        tokenIntrospection.verifyToken(token);

        //get or issue tracking id
        UUID trackingUuid = this.trackingHeaderBean.getUUID();

        log.info("Starts a {{httpMethod}} process. dataModel = {{baseName}}, tracking = {}", xTracking);
        log.info("Execute the adaptor. adaptor = {}, tracking = {}",this.adaptor.getClass(), trackingUuid);
        {{#isBodyAllowed}}
        ApiContext apiContext = new ApiContext(apiUrl, {{#bodyParam}}{{paramName}}{{/bodyParam}}, trackingUuid, query, token);
        {{/isBodyAllowed}}
        {{^isBodyAllowed}}
        ApiContext apiContext = new ApiContext(apiUrl, null, trackingUuid, query, token);
        {{/isBodyAllowed}}

        // Transform the ApiContext
        ApiContext transformedApiContext = this.transform.map(t -> t.encode{{httpMethod}}(apiContext)).orElse(apiContext);

        // Execute the adaptor
        {{>responseType}} response = this.adaptor.send{{httpMethod}}{{#isVoid}}_Void{{/isVoid}}(transformedApiContext);
        log.info("Send a {{httpMethod}} request completed. tracking = {}", trackingUuid);

        // Transform the response
        {{>responseType}} result = this.transform.map(t -> t.decode{{httpMethod}}(response)).orElse(response);

        return result;
    }

    {{/operation}}
    {{/reactive}}
{{/isDelegate}}
}
{{/operations}}